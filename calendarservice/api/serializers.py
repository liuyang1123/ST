from rest_framework import serializers
from api.models import PROVIDERS, PARTICIPATION_STATUS, TRANSPARENCY, EVENT_STATUS, UNKNOWN

# Serializers define the API representation.


class CalendarSerializer(serializers.Serializer):
    id = serializers.CharField(max_length=36, read_only=True)
    user_id = serializers.CharField(max_length=36, read_only=True)
    provider_name = serializers.CharField(max_length=20)
    calendar_name = serializers.CharField(max_length=30)
    calendar_readonly = serializers.BooleanField(default=False)
    calendar_deleted = serializers.BooleanField(default=False)

    def validate_provider_name(self, value):
        """
        Check that the blog post is about Django.
        """
        if value.lower() not in PROVIDERS:
            raise serializers.ValidationError("Provider name unknown")
        return value


class EventSerializer(serializers.Serializer):
    id = serializers.CharField(max_length=36,
                               read_only=True)  # autogenerated by rethinkdb
    calendar_id = serializers.CharField(
        max_length=36, read_only=True)  # self.kwargs['calendar_id']
    user_id = serializers.CharField(max_length=36, read_only=True)
    summary = serializers.CharField(
        max_length=140, allow_blank=True, default="")
    description = serializers.CharField(
        max_length=200, allow_blank=True, default="")
    deleted = serializers.BooleanField(default=False)
    # start = serializers.DateTimeField(allow_null=True, default=None) # Can
    # be blank = To be determined
    start = serializers.CharField(max_length=50, allow_blank=True, default="")
    # end = serializers.DateTimeField(allow_null=True, default=None) # Can be
    # blank = To be determined
    end = serializers.CharField(
        max_length=50,
        allow_blank=True,
        default="")  # Can be blank = To be determined
    # start - end or a specific duration when start y end are null
    duration = serializers.IntegerField(allow_null=True, required=False)
    location = serializers.CharField(
        max_length=140, allow_blank=True, default="")
    participation_status = serializers.CharField(
        max_length=20, default=UNKNOWN, allow_blank=True)
    attendees = serializers.ListField(allow_null=True)
    transparency = serializers.CharField(
        max_length=20, default=UNKNOWN, allow_blank=True)
    event_status = serializers.CharField(
        max_length=20, default=UNKNOWN, allow_blank=True)
    categories = serializers.CharField(
        max_length=20, allow_blank=True, default="Meeting")
    is_fixed = serializers.BooleanField(default=False)
    created = serializers.DateTimeField(read_only=True)  # Set on inserted
    updated = serializers.DateTimeField(
        read_only=True)  # Set on inserted, and update

    def validate_participation_status(self, status):
        if status.lower() not in PARTICIPATION_STATUS:
            raise serializers.ValidationError("Participation status unknown")
        return status

    def validate_transparency(self, transparency):
        if transparency.lower() not in TRANSPARENCY:
            raise serializers.ValidationError("Transparency unknown")
        return transparency

    def validate_event_status(self, status):
        if status.lower() not in EVENT_STATUS:
            raise serializers.ValidationError("Event status unknown")
        return status
